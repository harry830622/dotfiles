" Author: harry830622
" Email: harry830622@gmail.com

" Variables {{{1

let g:dot_dir = $dot_dir

" Plugins {{{1

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'ntpeters/vim-better-whitespace'
Plug 'jiangmiao/auto-pairs'
Plug 'kien/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'
Plug 'junegunn/vim-easy-align'
Plug 'sbdchd/neoformat'

Plug 'morhetz/gruvbox'

Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'

Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'edkolev/tmuxline.vim'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" Plugins' settings {{{1

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#ycm#error_symbol = "✗ "
let g:airline#extensions#ycm#warning_symbol = "∆ "
let g:airline#extensions#ale#error_symbol = "✗ "
let g:airline#extensions#ale#warning_symbol = "∆ "
let g:airline#extensions#tabline#enabled = 1

" ale
let g:ale_linters = {
      \ "javascript": ["eslint"],
      \ "c": [],
      \ "cpp": []
      \ }
let g:ale_sign_error = "✗"
let g:ale_sign_warning = "∆"
let g:ale_javascript_eslint_use_global = 1
" let g:ale_javascript_eslint_options = " --fix"

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = g:dot_dir . "/vim/ycm_extra_conf.py"
let g:ycm_error_symbol = "✗"
let g:ycm_warning_symbol = "∆"
" let g:ycm_autoclose_preview_window_after_insertion = 1

" Neoformat
let g:neoformat_enabled_javascript = ["prettiereslint"]
let g:neoformat_enabled_python = ["yapf"]

" Usability options {{{1

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches
set hlsearch
set incsearch

set ff=unix

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Set the command window height to 2 lines, to avoid many cases of having to
" press <Enter> to continue
set cmdheight=2

" Display line numbers on the left
set number
set relativenumber

" Wrap the code beyond 80 columns
set textwidth=80
set colorcolumn=81

" Highlight the current line
set cursorline

" Set the timeout for mapping in ms, default is 1000
" set timeoutlen=500

" Load cscope database
set cscopetag
set csto=0
cs add cscope.out

" Color schemes {{{1

" Enable syntax highlighting
syntax on

" Support 256 colors environment
set t_Co=256

" Set colorscheme
set background=dark
colorscheme gruvbox

" Indentation options {{{1

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set expandtab
set softtabstop=2
set shiftwidth=2

" Abbreviations {{{1

iabbrev atg harry830622@gmail.com
iabbrev ateda yhchang@eda.ee.ntu.edu.tw

" Mappings {{{1

" Map <leader>
let mapleader=" "

" Replace <esc> with jk
inoremap jk <esc>

" Make eol and sol more convenient
nnoremap H 0
nnoremap L $

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
nnoremap Y y$

" Edit my vimrc
nnoremap <leader>ev :edit $MYVIMRC<cr>

" Source my vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Map <c-l> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <leader>nh :nohlsearch<cr><c-l>

" Get off my lawn
nnoremap <left> :echoerr "Use h"<cr>
nnoremap <right> :echoerr "Use l"<cr>
nnoremap <up> :echoerr "Use k"<cr>
nnoremap <down> :echoerr "Use j"<cr>

" Force writing the read-only file
cnoremap w!! w !sudo tee > /dev/null %

" Easier to write & quit
nnoremap <leader>w :update<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>x :x<cr>

" Easier to copy to & paste from the system clipboard
vnoremap <leader>y "+y
nnoremap <leader>p "+p

" Toggle folding
nnoremap <leader>z za

" Easier to close preview
nnoremap <leader>pc :pclose<cr>

" Easier to close location
nnoremap <leader>lc :lclose<cr>

" Easier to navigate buffers
nnoremap <leader>bb :b#<cr>
nnoremap <leader>bn :bn<cr>
nnoremap <leader>bp :bp<cr>
nnoremap <leader>bd :bd<cr>

" Select the whole file
nnoremap <leader>% ggVG

" vim-plug
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>pu :PlugUpdate<cr>

" vim-gitgutter
nnoremap ]h :GitGutterNextHunk<cr>
nnoremap [h :GitGutterPrevHunk<cr>

" vim-easy-align
xmap ga <plug>(EasyAlign)
nmap ga <plug>(EasyAlign)

" Format a whole buffer using Neoformat
nnoremap <leader>f :Neoformat<cr>

" Autocmds {{{1

" Change cursor shape in different mode
augroup cursor_shape
  autocmd!
  autocmd InsertEnter *
        \ if v:insertmode == 'i' |
        \   silent execute "!" . g:dot_dir . "/vim/change_cursor.sh ibeam" |
        \ elseif v:insertmode == 'r' |
        \   silent execute "!" . g:dot_dir . "/vim/change_cursor.sh underline" |
        \ endif
  autocmd InsertLeave *
        \ silent execute "!" . g:dot_dir . "/vim/change_cursor.sh block"
  autocmd VimLeave *
        \ silent execute "!" . g:dot_dir . "/vim/change_cursor.sh block"
augroup END

augroup filetype_c
  autocmd!
  autocmd FileType c nnoremap <buffer> <leader>css
        \ :cs find s <c-r>=expand("<cword>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>csg
        \ :cs find g <c-r>=expand("<cword>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>csc
        \ :cs find c <c-r>=expand("<cword>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>cst
        \ :cs find t <c-r>=expand("<cword>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>cse
        \ :cs find e <c-r>=expand("<cword>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>csf
        \ :cs find f <c-r>=expand("<cfile>")<cr><cr>
  autocmd FileType c nnoremap <buffer> <leader>csi
        \ :cs find i ^<c-r>=expand("<cfile>")<cr>$<cr>
  autocmd FileType c nnoremap <buffer> <leader>csd
        \ :cs find d <c-r>=expand("<cword>")<cr><cr>
augroup END

augroup filetype_cpp
  autocmd!
  " autocmd FileType cpp
  "       \ vnoremap <buffer> <leader>f
  "       \ :pyfile /usr/share/clang/clang-format.py<cr>
  autocmd BufNewFile *.hpp
        \ silent execute "normal! i#ifndef " . expand("%:t:r") . "_hpp\<esc>"
        \ . "viwU" . "yypwcwdefine\<esc>" . "o#endif\<esc>"
        \ . "ko\nclass " . expand("%:t:r") . "\<esc>" . "B~"
        \ . "A {\npublic:\nprivate:\n};\n\<esc>"
augroup END

augroup filetype_gitcommit
  autocmd!
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal colorcolumn=73
augroup END

augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType text,markdown,asciidoc setlocal spell
augroup END

augroup before_write
  autocmd!
  autocmd BufWritePre * StripWhitespace
augroup END
